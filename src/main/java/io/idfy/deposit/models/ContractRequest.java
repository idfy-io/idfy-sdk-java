/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.DataToSign;
import java.time.OffsetDateTime;
import java.io.Serializable;

/**
 * Contract information.
 */
@JsonDeserialize(builder = ContractRequest.Builder.class)
public class ContractRequest  implements Serializable {
  private final DataToSign dataToSign;  // Default value is: null

  /**
   * Monthly rent for the contract
   */
  private final Double monthlyRent;  // Default value is: null

  /**
   * Deposit factor. The deposit amount is calculated as `monthlyRent * depositFactor`
   */
  private final Double depositFactor;  // Default value is: null

  /**
   * Deposit amount. If this is specified `monthlyRent` and `depositFactor` will be ignored.
   */
  private final Double depositAmount;  // Default value is: null

  /**
   * Optional payment deadline. Will be used to inform the tenant about payment deadlines. Default/maximum 45 days
   */
  private final OffsetDateTime paymentDeadline;  // Default value is: null

  private final OffsetDateTime from;  // Default value is: null

  private final OffsetDateTime to;  // Default value is: null

  private ContractRequest(Builder builder) {
      dataToSign = builder.dataToSign;
      monthlyRent = builder.monthlyRent;
      depositFactor = builder.depositFactor;
      depositAmount = builder.depositAmount;
      paymentDeadline = builder.paymentDeadline;
      from = builder.from;
      to = builder.to;
  }

      /**
      * Get dataToSign
      * @return dataToSign
      **/
      public DataToSign getDataToSign() {return dataToSign;}

      /**
      * Monthly rent for the contract
      * @return monthlyRent
      **/
      public Double getMonthlyRent() {return monthlyRent;}

      /**
      * Deposit factor. The deposit amount is calculated as `monthlyRent * depositFactor`
      * @return depositFactor
      **/
      public Double getDepositFactor() {return depositFactor;}

      /**
      * Deposit amount. If this is specified `monthlyRent` and `depositFactor` will be ignored.
      * @return depositAmount
      **/
      public Double getDepositAmount() {return depositAmount;}

      /**
      * Optional payment deadline. Will be used to inform the tenant about payment deadlines. Default/maximum 45 days
      * @return paymentDeadline
      **/
      public OffsetDateTime getPaymentDeadline() {return paymentDeadline;}

      /**
      * Get from
      * @return from
      **/
      public OffsetDateTime getFrom() {return from;}

      /**
      * Get to
      * @return to
      **/
      public OffsetDateTime getTo() {return to;}


  public static final class Builder {
      private DataToSign dataToSign;
      private Double monthlyRent;
      private Double depositFactor;
      private Double depositAmount;
      private OffsetDateTime paymentDeadline;
      private OffsetDateTime from;
      private OffsetDateTime to;

    public Builder() {
    }

    public Builder(ContractRequest copy) {
        this.dataToSign = copy.getDataToSign();
        this.monthlyRent = copy.getMonthlyRent();
        this.depositFactor = copy.getDepositFactor();
        this.depositAmount = copy.getDepositAmount();
        this.paymentDeadline = copy.getPaymentDeadline();
        this.from = copy.getFrom();
        this.to = copy.getTo();
    }

    public Builder withDataToSign(DataToSign dataToSign) {
      this.dataToSign = dataToSign;
      return this;
    }

    public Builder withMonthlyRent(Double monthlyRent) {
      this.monthlyRent = monthlyRent;
      return this;
    }

    public Builder withDepositFactor(Double depositFactor) {
      this.depositFactor = depositFactor;
      return this;
    }

    public Builder withDepositAmount(Double depositAmount) {
      this.depositAmount = depositAmount;
      return this;
    }

    public Builder withPaymentDeadline(OffsetDateTime paymentDeadline) {
      this.paymentDeadline = paymentDeadline;
      return this;
    }

    public Builder withFrom(OffsetDateTime from) {
      this.from = from;
      return this;
    }

    public Builder withTo(OffsetDateTime to) {
      this.to = to;
      return this;
    }


    public ContractRequest build() { return new ContractRequest(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractRequest contractRequest = (ContractRequest) o;
    return Objects.equals(this.dataToSign, contractRequest.dataToSign) &&
        Objects.equals(this.monthlyRent, contractRequest.monthlyRent) &&
        Objects.equals(this.depositFactor, contractRequest.depositFactor) &&
        Objects.equals(this.depositAmount, contractRequest.depositAmount) &&
        Objects.equals(this.paymentDeadline, contractRequest.paymentDeadline) &&
        Objects.equals(this.from, contractRequest.from) &&
        Objects.equals(this.to, contractRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataToSign, monthlyRent, depositFactor, depositAmount, paymentDeadline, from, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractRequest {\n");
    
    sb.append("    dataToSign: ").append(toIndentedString(dataToSign)).append("\n");
    sb.append("    monthlyRent: ").append(toIndentedString(monthlyRent)).append("\n");
    sb.append("    depositFactor: ").append(toIndentedString(depositFactor)).append("\n");
    sb.append("    depositAmount: ").append(toIndentedString(depositAmount)).append("\n");
    sb.append("    paymentDeadline: ").append(toIndentedString(paymentDeadline)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
