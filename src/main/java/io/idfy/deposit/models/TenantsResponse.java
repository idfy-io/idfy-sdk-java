/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.IFrameSettings;
import io.idfy.deposit.models.LoanApplication;
import io.idfy.deposit.models.RedirectSettings;
import io.idfy.deposit.models.TenantInfo;
import io.idfy.deposit.models.TenantsResponseFlow;
import io.idfy.deposit.models.UI;
import java.util.UUID;
import java.io.Serializable;

/**
 * TenantsResponse
 */
@JsonDeserialize(builder = TenantsResponse.Builder.class)
public class TenantsResponse  implements Serializable {
  /**
   * The tenants unique identifier
   */
  private final UUID id;  // Default value is: null

  /**
   * The URL that the tenant must use to sign the deposit
   */
  private final String url;  // Default value is: null

  /**
   * Url that can be used by the tenant to resume directly from the loan wizard. Only available after a bank-account has been created.
   */
  private final String loanApplicationUrl;  // Default value is: null

  /**
   * The tenants bank account number when an account has been created
   */
  private final String bankAccountNumber;  // Default value is: null

  /**
   * 
   */
  private final LoanApplication loanApplication;  // Default value is: null

  /**
   * Your reference for the Tenant.
   */
  private final String externalId;  // Default value is: null

  /**
   * If AML is required
   */
  private final Boolean aml;  // Default value is: null

  private final TenantInfo info;  // Default value is: null

  private final UI ui;  // Default value is: null

  /**
   * Defines the flow to use.
   */
  private final TenantsResponseFlow flow;  // Default value is: null

  private final IFrameSettings iframeSettings;  // Default value is: null

  private final RedirectSettings redirectSettings;  // Default value is: null

  private TenantsResponse(Builder builder) {
      id = builder.id;
      url = builder.url;
      loanApplicationUrl = builder.loanApplicationUrl;
      bankAccountNumber = builder.bankAccountNumber;
      loanApplication = builder.loanApplication;
      externalId = builder.externalId;
      aml = builder.aml;
      info = builder.info;
      ui = builder.ui;
      flow = builder.flow;
      iframeSettings = builder.iframeSettings;
      redirectSettings = builder.redirectSettings;
  }

      /**
      * The tenants unique identifier
      * @return id
      **/
      public UUID getId() {return id;}

      /**
      * The URL that the tenant must use to sign the deposit
      * @return url
      **/
      public String getUrl() {return url;}

      /**
      * Url that can be used by the tenant to resume directly from the loan wizard. Only available after a bank-account has been created.
      * @return loanApplicationUrl
      **/
      public String getLoanApplicationUrl() {return loanApplicationUrl;}

      /**
      * The tenants bank account number when an account has been created
      * @return bankAccountNumber
      **/
      public String getBankAccountNumber() {return bankAccountNumber;}

      /**
      * 
      * @return loanApplication
      **/
      public LoanApplication getLoanApplication() {return loanApplication;}

      /**
      * Your reference for the Tenant.
      * @return externalId
      **/
      public String getExternalId() {return externalId;}

      /**
      * If AML is required
      * @return aml
      **/
      public Boolean getAml() {return aml;}

      /**
      * Get info
      * @return info
      **/
      public TenantInfo getInfo() {return info;}

      /**
      * Get ui
      * @return ui
      **/
      public UI getUi() {return ui;}

      /**
      * Defines the flow to use.
      * @return flow
      **/
      public TenantsResponseFlow getFlow() {return flow;}

      /**
      * Get iframeSettings
      * @return iframeSettings
      **/
      public IFrameSettings getIframeSettings() {return iframeSettings;}

      /**
      * Get redirectSettings
      * @return redirectSettings
      **/
      public RedirectSettings getRedirectSettings() {return redirectSettings;}


  public static final class Builder {
      private UUID id;
      private String url;
      private String loanApplicationUrl;
      private String bankAccountNumber;
      private LoanApplication loanApplication;
      private String externalId;
      private Boolean aml;
      private TenantInfo info;
      private UI ui;
      private TenantsResponseFlow flow;
      private IFrameSettings iframeSettings;
      private RedirectSettings redirectSettings;

    public Builder() {
    }

    public Builder(TenantsResponse copy) {
        this.id = copy.getId();
        this.url = copy.getUrl();
        this.loanApplicationUrl = copy.getLoanApplicationUrl();
        this.bankAccountNumber = copy.getBankAccountNumber();
        this.loanApplication = copy.getLoanApplication();
        this.externalId = copy.getExternalId();
        this.aml = copy.getAml();
        this.info = copy.getInfo();
        this.ui = copy.getUi();
        this.flow = copy.getFlow();
        this.iframeSettings = copy.getIframeSettings();
        this.redirectSettings = copy.getRedirectSettings();
    }

    public Builder withId(UUID id) {
      this.id = id;
      return this;
    }

    public Builder withUrl(String url) {
      this.url = url;
      return this;
    }

    public Builder withLoanApplicationUrl(String loanApplicationUrl) {
      this.loanApplicationUrl = loanApplicationUrl;
      return this;
    }

    public Builder withBankAccountNumber(String bankAccountNumber) {
      this.bankAccountNumber = bankAccountNumber;
      return this;
    }

    public Builder withLoanApplication(LoanApplication loanApplication) {
      this.loanApplication = loanApplication;
      return this;
    }

    public Builder withExternalId(String externalId) {
      this.externalId = externalId;
      return this;
    }

    public Builder withAml(Boolean aml) {
      this.aml = aml;
      return this;
    }

    public Builder withInfo(TenantInfo info) {
      this.info = info;
      return this;
    }

    public Builder withUi(UI ui) {
      this.ui = ui;
      return this;
    }

    public Builder withFlow(TenantsResponseFlow flow) {
      this.flow = flow;
      return this;
    }

    public Builder withIframeSettings(IFrameSettings iframeSettings) {
      this.iframeSettings = iframeSettings;
      return this;
    }

    public Builder withRedirectSettings(RedirectSettings redirectSettings) {
      this.redirectSettings = redirectSettings;
      return this;
    }


    public TenantsResponse build() { return new TenantsResponse(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantsResponse tenantsResponse = (TenantsResponse) o;
    return Objects.equals(this.id, tenantsResponse.id) &&
        Objects.equals(this.url, tenantsResponse.url) &&
        Objects.equals(this.loanApplicationUrl, tenantsResponse.loanApplicationUrl) &&
        Objects.equals(this.bankAccountNumber, tenantsResponse.bankAccountNumber) &&
        Objects.equals(this.loanApplication, tenantsResponse.loanApplication) &&
        Objects.equals(this.externalId, tenantsResponse.externalId) &&
        Objects.equals(this.aml, tenantsResponse.aml) &&
        Objects.equals(this.info, tenantsResponse.info) &&
        Objects.equals(this.ui, tenantsResponse.ui) &&
        Objects.equals(this.flow, tenantsResponse.flow) &&
        Objects.equals(this.iframeSettings, tenantsResponse.iframeSettings) &&
        Objects.equals(this.redirectSettings, tenantsResponse.redirectSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, loanApplicationUrl, bankAccountNumber, loanApplication, externalId, aml, info, ui, flow, iframeSettings, redirectSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantsResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    loanApplicationUrl: ").append(toIndentedString(loanApplicationUrl)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    loanApplication: ").append(toIndentedString(loanApplication)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    aml: ").append(toIndentedString(aml)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    ui: ").append(toIndentedString(ui)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    iframeSettings: ").append(toIndentedString(iframeSettings)).append("\n");
    sb.append("    redirectSettings: ").append(toIndentedString(redirectSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
