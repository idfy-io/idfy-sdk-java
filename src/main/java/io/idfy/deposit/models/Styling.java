/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.StylingColorTheme;
import io.idfy.deposit.models.StylingSpinner;
import io.idfy.deposit.models.StylingThemeMode;
import java.io.Serializable;

/**
 * Styling options for the UI
 */
@JsonDeserialize(builder = Styling.Builder.class)
public class Styling  implements Serializable {
  /**
   * The color theme for the application.
   */
  private final StylingColorTheme colorTheme;  // Default value is: null

  /**
   * The theme color mode, specify if you want it dark or light themed. Defaults to light
   */
  private final StylingThemeMode themeMode;  // Default value is: null

  /**
   * The type of spinner to show in loading screens.
   */
  private final StylingSpinner spinner;  // Default value is: null

  /**
   * Override the application background color (use hexadecimal value)
   */
  private final String backgroundColor;  // Default value is: null

  private Styling(Builder builder) {
      colorTheme = builder.colorTheme;
      themeMode = builder.themeMode;
      spinner = builder.spinner;
      backgroundColor = builder.backgroundColor;
  }

      /**
      * The color theme for the application.
      * @return colorTheme
      **/
      public StylingColorTheme getColorTheme() {return colorTheme;}

      /**
      * The theme color mode, specify if you want it dark or light themed. Defaults to light
      * @return themeMode
      **/
      public StylingThemeMode getThemeMode() {return themeMode;}

      /**
      * The type of spinner to show in loading screens.
      * @return spinner
      **/
      public StylingSpinner getSpinner() {return spinner;}

      /**
      * Override the application background color (use hexadecimal value)
      * @return backgroundColor
      **/
      public String getBackgroundColor() {return backgroundColor;}


  public static final class Builder {
      private StylingColorTheme colorTheme;
      private StylingThemeMode themeMode;
      private StylingSpinner spinner;
      private String backgroundColor;

    public Builder() {
    }

    public Builder(Styling copy) {
        this.colorTheme = copy.getColorTheme();
        this.themeMode = copy.getThemeMode();
        this.spinner = copy.getSpinner();
        this.backgroundColor = copy.getBackgroundColor();
    }

    public Builder withColorTheme(StylingColorTheme colorTheme) {
      this.colorTheme = colorTheme;
      return this;
    }

    public Builder withThemeMode(StylingThemeMode themeMode) {
      this.themeMode = themeMode;
      return this;
    }

    public Builder withSpinner(StylingSpinner spinner) {
      this.spinner = spinner;
      return this;
    }

    public Builder withBackgroundColor(String backgroundColor) {
      this.backgroundColor = backgroundColor;
      return this;
    }


    public Styling build() { return new Styling(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Styling styling = (Styling) o;
    return Objects.equals(this.colorTheme, styling.colorTheme) &&
        Objects.equals(this.themeMode, styling.themeMode) &&
        Objects.equals(this.spinner, styling.spinner) &&
        Objects.equals(this.backgroundColor, styling.backgroundColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorTheme, themeMode, spinner, backgroundColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Styling {\n");
    
    sb.append("    colorTheme: ").append(toIndentedString(colorTheme)).append("\n");
    sb.append("    themeMode: ").append(toIndentedString(themeMode)).append("\n");
    sb.append("    spinner: ").append(toIndentedString(spinner)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
