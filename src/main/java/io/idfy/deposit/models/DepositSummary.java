/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.LandlordSummary;
import io.idfy.deposit.models.Status;
import io.idfy.deposit.models.TenantSummary;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.io.Serializable;

/**
 * A summary containing core information about a deposit
 */
@JsonDeserialize(builder = DepositSummary.Builder.class)
public class DepositSummary  implements Serializable {
  /**
   * The deposit's unique identifier.
   */
  private final UUID id;  // Default value is: null

  /**
   * The document's unique identifier.
   */
  private final UUID documentId;  // Default value is: null

  private final Status status;  // Default value is: null

  /**
   * Creation date (ISO-8601)
   */
  private final OffsetDateTime createdDate;  // Default value is: null

  /**
   * Deadline for when payment must have been made to the account (ISO-8601).
   */
  private final OffsetDateTime paymentDeadline;  // Default value is: null

  private final List<TenantSummary> tenants;  // Default value is: new ArrayList<>()

  private final LandlordSummary landlord;  // Default value is: null

  private DepositSummary(Builder builder) {
      id = builder.id;
      documentId = builder.documentId;
      status = builder.status;
      createdDate = builder.createdDate;
      paymentDeadline = builder.paymentDeadline;
      tenants = builder.tenants;
      landlord = builder.landlord;
  }

      /**
      * The deposit's unique identifier.
      * @return id
      **/
      public UUID getId() {return id;}

      /**
      * The document's unique identifier.
      * @return documentId
      **/
      public UUID getDocumentId() {return documentId;}

      /**
      * Get status
      * @return status
      **/
      public Status getStatus() {return status;}

      /**
      * Creation date (ISO-8601)
      * @return createdDate
      **/
      public OffsetDateTime getCreatedDate() {return createdDate;}

      /**
      * Deadline for when payment must have been made to the account (ISO-8601).
      * @return paymentDeadline
      **/
      public OffsetDateTime getPaymentDeadline() {return paymentDeadline;}

      /**
      * Get tenants
      * @return tenants
      **/
      public List<TenantSummary> getTenants() {return tenants;}

      /**
      * Get landlord
      * @return landlord
      **/
      public LandlordSummary getLandlord() {return landlord;}


  public static final class Builder {
      private UUID id;
      private UUID documentId;
      private Status status;
      private OffsetDateTime createdDate;
      private OffsetDateTime paymentDeadline;
      private List<TenantSummary> tenants;
      private LandlordSummary landlord;

    public Builder() {
    }

    public Builder(DepositSummary copy) {
        this.id = copy.getId();
        this.documentId = copy.getDocumentId();
        this.status = copy.getStatus();
        this.createdDate = copy.getCreatedDate();
        this.paymentDeadline = copy.getPaymentDeadline();
        this.tenants = copy.getTenants();
        this.landlord = copy.getLandlord();
    }

    public Builder withId(UUID id) {
      this.id = id;
      return this;
    }

    public Builder withDocumentId(UUID documentId) {
      this.documentId = documentId;
      return this;
    }

    public Builder withStatus(Status status) {
      this.status = status;
      return this;
    }

    public Builder withCreatedDate(OffsetDateTime createdDate) {
      this.createdDate = createdDate;
      return this;
    }

    public Builder withPaymentDeadline(OffsetDateTime paymentDeadline) {
      this.paymentDeadline = paymentDeadline;
      return this;
    }

    public Builder withTenants(List<TenantSummary> tenants) {
      this.tenants = tenants;
      return this;
    }

    public Builder addTenantsItem(TenantSummary tenantsItem) {
      if (this.tenants == null) {
        this.tenants = new ArrayList<>();
      }
      this.tenants.add(tenantsItem);
      return this;
    }

    public Builder withLandlord(LandlordSummary landlord) {
      this.landlord = landlord;
      return this;
    }


    public DepositSummary build() { return new DepositSummary(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositSummary depositSummary = (DepositSummary) o;
    return Objects.equals(this.id, depositSummary.id) &&
        Objects.equals(this.documentId, depositSummary.documentId) &&
        Objects.equals(this.status, depositSummary.status) &&
        Objects.equals(this.createdDate, depositSummary.createdDate) &&
        Objects.equals(this.paymentDeadline, depositSummary.paymentDeadline) &&
        Objects.equals(this.tenants, depositSummary.tenants) &&
        Objects.equals(this.landlord, depositSummary.landlord);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, documentId, status, createdDate, paymentDeadline, tenants, landlord);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositSummary {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    paymentDeadline: ").append(toIndentedString(paymentDeadline)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    landlord: ").append(toIndentedString(landlord)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
