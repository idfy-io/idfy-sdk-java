/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.ReleaseAmount;
import io.idfy.deposit.models.TerminateRequestCategory;
import io.idfy.deposit.models.TransactionInfo;
import java.io.Serializable;

/**
 * TerminateRequest
 */
@JsonDeserialize(builder = TerminateRequest.Builder.class)
public class TerminateRequest  implements Serializable {
  /**
   * Termination category. Use TENANT to release the entire amount to the tenant.  In case of a SPLIT, provide the amounts to use.  DISPUTE=N/A
   */
  private final TerminateRequestCategory category;  // Default value is: null

  private final ReleaseAmount amount;  // Default value is: null

  /**
   * The user who initiated the termination
   */
  private final String username;  // Default value is: null

  private final TransactionInfo transactionInfo;  // Default value is: null

  private TerminateRequest(Builder builder) {
      category = builder.category;
      amount = builder.amount;
      username = builder.username;
      transactionInfo = builder.transactionInfo;
  }

      /**
      * Termination category. Use TENANT to release the entire amount to the tenant.  In case of a SPLIT, provide the amounts to use.  DISPUTE=N/A
      * @return category
      **/
      public TerminateRequestCategory getCategory() {return category;}

      /**
      * Get amount
      * @return amount
      **/
      public ReleaseAmount getAmount() {return amount;}

      /**
      * The user who initiated the termination
      * @return username
      **/
      public String getUsername() {return username;}

      /**
      * Get transactionInfo
      * @return transactionInfo
      **/
      public TransactionInfo getTransactionInfo() {return transactionInfo;}


  public static final class Builder {
      private TerminateRequestCategory category;
      private ReleaseAmount amount;
      private String username;
      private TransactionInfo transactionInfo;

    public Builder() {
    }

    public Builder(TerminateRequest copy) {
        this.category = copy.getCategory();
        this.amount = copy.getAmount();
        this.username = copy.getUsername();
        this.transactionInfo = copy.getTransactionInfo();
    }

    public Builder withCategory(TerminateRequestCategory category) {
      this.category = category;
      return this;
    }

    public Builder withAmount(ReleaseAmount amount) {
      this.amount = amount;
      return this;
    }

    public Builder withUsername(String username) {
      this.username = username;
      return this;
    }

    public Builder withTransactionInfo(TransactionInfo transactionInfo) {
      this.transactionInfo = transactionInfo;
      return this;
    }


    public TerminateRequest build() { return new TerminateRequest(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminateRequest terminateRequest = (TerminateRequest) o;
    return Objects.equals(this.category, terminateRequest.category) &&
        Objects.equals(this.amount, terminateRequest.amount) &&
        Objects.equals(this.username, terminateRequest.username) &&
        Objects.equals(this.transactionInfo, terminateRequest.transactionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, amount, username, transactionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminateRequest {\n");
    
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    transactionInfo: ").append(toIndentedString(transactionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
