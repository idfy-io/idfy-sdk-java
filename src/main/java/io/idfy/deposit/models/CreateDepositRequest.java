/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.deposit.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import io.idfy.deposit.models.Advanced;
import io.idfy.deposit.models.ContactInformation;
import io.idfy.deposit.models.ContractRequest;
import io.idfy.deposit.models.LandlordRequest;
import io.idfy.deposit.models.RentObjectRequest;
import io.idfy.deposit.models.Tenant;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * CreateDepositRequest
 */
@JsonDeserialize(builder = CreateDepositRequest.Builder.class)
public class CreateDepositRequest  implements Serializable {
  /**
   * Array of Tenants
   */
  private final List<Tenant> tenants;  // Default value is: new ArrayList<>()

  private final LandlordRequest landlord;  // Default value is: null

  /**
   * Your reference for the contract.
   */
  private final String externalId;  // Default value is: null

  private final ContractRequest contract;  // Default value is: null

  private final RentObjectRequest rentObject;  // Default value is: null

  private final ContactInformation contactDetails;  // Default value is: null

  private final Advanced advanced;  // Default value is: null

  private CreateDepositRequest(Builder builder) {
      tenants = builder.tenants;
      landlord = builder.landlord;
      externalId = builder.externalId;
      contract = builder.contract;
      rentObject = builder.rentObject;
      contactDetails = builder.contactDetails;
      advanced = builder.advanced;
  }

      /**
      * Array of Tenants
      * @return tenants
      **/
      public List<Tenant> getTenants() {return tenants;}

      /**
      * Get landlord
      * @return landlord
      **/
      public LandlordRequest getLandlord() {return landlord;}

      /**
      * Your reference for the contract.
      * @return externalId
      **/
      public String getExternalId() {return externalId;}

      /**
      * Get contract
      * @return contract
      **/
      public ContractRequest getContract() {return contract;}

      /**
      * Get rentObject
      * @return rentObject
      **/
      public RentObjectRequest getRentObject() {return rentObject;}

      /**
      * Get contactDetails
      * @return contactDetails
      **/
      public ContactInformation getContactDetails() {return contactDetails;}

      /**
      * Get advanced
      * @return advanced
      **/
      public Advanced getAdvanced() {return advanced;}


  public static final class Builder {
      private List<Tenant> tenants;
      private LandlordRequest landlord;
      private String externalId;
      private ContractRequest contract;
      private RentObjectRequest rentObject;
      private ContactInformation contactDetails;
      private Advanced advanced;

    public Builder() {
    }

    public Builder(CreateDepositRequest copy) {
        this.tenants = copy.getTenants();
        this.landlord = copy.getLandlord();
        this.externalId = copy.getExternalId();
        this.contract = copy.getContract();
        this.rentObject = copy.getRentObject();
        this.contactDetails = copy.getContactDetails();
        this.advanced = copy.getAdvanced();
    }

    public Builder withTenants(List<Tenant> tenants) {
      this.tenants = tenants;
      return this;
    }

    public Builder addTenantsItem(Tenant tenantsItem) {
      this.tenants.add(tenantsItem);
      return this;
    }

    public Builder withLandlord(LandlordRequest landlord) {
      this.landlord = landlord;
      return this;
    }

    public Builder withExternalId(String externalId) {
      this.externalId = externalId;
      return this;
    }

    public Builder withContract(ContractRequest contract) {
      this.contract = contract;
      return this;
    }

    public Builder withRentObject(RentObjectRequest rentObject) {
      this.rentObject = rentObject;
      return this;
    }

    public Builder withContactDetails(ContactInformation contactDetails) {
      this.contactDetails = contactDetails;
      return this;
    }

    public Builder withAdvanced(Advanced advanced) {
      this.advanced = advanced;
      return this;
    }


    public CreateDepositRequest build() { return new CreateDepositRequest(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDepositRequest createDepositRequest = (CreateDepositRequest) o;
    return Objects.equals(this.tenants, createDepositRequest.tenants) &&
        Objects.equals(this.landlord, createDepositRequest.landlord) &&
        Objects.equals(this.externalId, createDepositRequest.externalId) &&
        Objects.equals(this.contract, createDepositRequest.contract) &&
        Objects.equals(this.rentObject, createDepositRequest.rentObject) &&
        Objects.equals(this.contactDetails, createDepositRequest.contactDetails) &&
        Objects.equals(this.advanced, createDepositRequest.advanced);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenants, landlord, externalId, contract, rentObject, contactDetails, advanced);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDepositRequest {\n");
    
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    landlord: ").append(toIndentedString(landlord)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    rentObject: ").append(toIndentedString(rentObject)).append("\n");
    sb.append("    contactDetails: ").append(toIndentedString(contactDetails)).append("\n");
    sb.append("    advanced: ").append(toIndentedString(advanced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
