/*
 * Idfy JWT
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */

package io.idfy.jwt.models;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import java.io.Serializable;

/**
 * JwtValidationResultDto
 */
@JsonDeserialize(builder = JwtValidationResultDto.Builder.class)
public class JwtValidationResultDto  implements Serializable {
  /**
   * Whether the JWT is valid.
   */
  private final Boolean valid;  // Default value is: null

  /**
   * The expiration time on or after which the JWT will not be accepted for processing.
   */
  private final OffsetDateTime expires;  // Default value is: null

  /**
   * The JWT payload.
   */
  private final Object payload;  // Default value is: null

  /**
   * Error message explaining reason for a failed validation.
   */
  private final String error;  // Default value is: null

  private JwtValidationResultDto(Builder builder) {
      valid = builder.valid;
      expires = builder.expires;
      payload = builder.payload;
      error = builder.error;
  }

      /**
      * Whether the JWT is valid.
      * @return valid
      **/
      public Boolean getValid() {return valid;}

      /**
      * The expiration time on or after which the JWT will not be accepted for processing.
      * @return expires
      **/
      public OffsetDateTime getExpires() {return expires;}

      /**
      * The JWT payload.
      * @return payload
      **/
      public Object getPayload() {return payload;}

      /**
      * Error message explaining reason for a failed validation.
      * @return error
      **/
      public String getError() {return error;}


  public static final class Builder {
      private Boolean valid;
      private OffsetDateTime expires;
      private Object payload;
      private String error;

    public Builder() {
    }

    public Builder(JwtValidationResultDto copy) {
        this.valid = copy.getValid();
        this.expires = copy.getExpires();
        this.payload = copy.getPayload();
        this.error = copy.getError();
    }

    public Builder withValid(Boolean valid) {
      this.valid = valid;
      return this;
    }

    public Builder withExpires(OffsetDateTime expires) {
      this.expires = expires;
      return this;
    }

    public Builder withPayload(Object payload) {
      this.payload = payload;
      return this;
    }

    public Builder withError(String error) {
      this.error = error;
      return this;
    }


    public JwtValidationResultDto build() { return new JwtValidationResultDto(this); }
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JwtValidationResultDto jwtValidationResultDto = (JwtValidationResultDto) o;
    return Objects.equals(this.valid, jwtValidationResultDto.valid) &&
        Objects.equals(this.expires, jwtValidationResultDto.expires) &&
        Objects.equals(this.payload, jwtValidationResultDto.payload) &&
        Objects.equals(this.error, jwtValidationResultDto.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(valid, expires, payload, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JwtValidationResultDto {\n");
    
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
