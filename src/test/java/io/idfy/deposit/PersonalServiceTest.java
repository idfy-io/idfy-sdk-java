/*
 * Idfy Deposit
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@idfy.io
 */


package io.idfy.deposit;

import io.idfy.OAuthScope;
import io.idfy.models.IdfyException;
import io.idfy.IdfyConfiguration;
import io.idfy.deposit.models.CollectionWithPagingDepositSummary;
import io.idfy.deposit.models.CreateDepositRequest;
import io.idfy.deposit.models.CreateDepositResponse;
import java.time.OffsetDateTime;
import io.idfy.deposit.models.TerminateRequest;
import java.util.UUID;
import io.idfy.deposit.models.UpdateDepositRequest;
import java.io.InputStream;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.*;

/**
 * API tests for PersonalService
 */

public class PersonalServiceTest {
    // The service name still needs to be set manually
    List<OAuthScope> scopes = Arrays.asList(OAuthScope.DocumentRead, OAuthScope.DocumentWrite, OAuthScope.DocumentFile);
    private final DepositService api = new DepositService("clientId", "clientSecret", scopes);

    @BeforeAll
    public static void setUp() {
        IdfyConfiguration.setBaseUrl("http://localhost:5000");
    }


    /**
     * Cancel deposit
     *
     * Cancel the deposit, funds that have been locked will be released to the tenant.
     */
    @Disabled("Mock server returns 404")
    @Test
    public void cancelDepositTest() throws IdfyException, Exception {
        UUID id = UUID.randomUUID();
        api.cancelDeposit(id);
    }

    /**
     * Create deposit
     *
     * Create a new deposit
     */
    @Test
    public void createDepositTest() throws IdfyException, Exception {
        CreateDepositRequest model =  new CreateDepositRequest.Builder().build();
        CreateDepositResponse response = api.createDeposit(model);
        assertNotNull(response);
    }

    /**
     * List deposit summaries
     *
     * Queries your deposits using the provided arguments
     */
    @Test
    public void listDepositSummariesTest() throws IdfyException, Exception {
        OffsetDateTime fromDate = OffsetDateTime.now();
        String status = new String("123");
        Integer offset = 123;
        Integer limit = 123;
        CollectionWithPagingDepositSummary response = api.listDepositSummaries(fromDate, status, offset, limit);
        assertNotNull(response);
    }

    /**
     * Release deposit
     *
     * Releases the deposit
     */
    @Test
    public void releaseDepositTest() throws IdfyException, Exception {
        UUID id = UUID.randomUUID();
        TerminateRequest request =  new TerminateRequest.Builder().build();
        api.releaseDeposit(id, request);
    }

    /**
     * Retrieve deposit
     *
     * Retrieves the deposit with the given id
     */
    @Test
    public void retrieveDepositTest() throws IdfyException, Exception {
        UUID id = UUID.randomUUID();
        Boolean queryPayment = true;
        CreateDepositResponse response = api.retrieveDeposit(id, queryPayment);
        assertNotNull(response);
    }

    /**
     * Update deposit
     *
     * Updates the deposit
     */
    @Disabled("No example response in swagger.")
    @Test
    public void updateDepositTest() throws IdfyException, Exception {
        UUID id = UUID.randomUUID();
        UpdateDepositRequest model =  new UpdateDepositRequest.Builder().build();
        CreateDepositResponse response = api.updateDeposit(id, model);
        assertNotNull(response);
    }


}
